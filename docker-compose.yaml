version: "1"

networks:
  my-network:

volumes:
  my-volume:


services:
  redis-local-test:
    image: "redis:latest"
    # container_name: 'redis-local-test'
    environment:
      - USERNAME=${USER}
      - PASSWORD=${PASS}
    command: redis-server --save 60 1 --loglevel warning
    ports:
      - "4001:6379"
    volumes:
      - type: volume
        source: my-volume
        target: /app
    networks:
      - my-network

  main-service-test:
    # container_name: "main-service-test"
    # We could replace this build command with a `build: .` to point to a Dockerfile in the current folder.
    build:
      # Context field is used to specify the build context for a service.
      # The build context is the path to the directory containing the Dockerfile and any files or directories required for building the Docker image.
      # The context field is particularly useful when your project structure has multiple directories, and you want to specify a subdirectory as the build context.
      context: ./
      dockerfile: Dockerfile
      # An example argument sent to Dockerfile.
      args:
        - DatabaseName=${DB_NAME}
    environment:
      - DB_NAME=${DB_NAME}
      - DB_PORT=27017
    ports:
      - "127.0.0.1:3001:3001"
    networks:
      - my-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
      # The placement setting specifies that this service needs to run as a worker role, rather than a manager role.
      placement:
        constraints:
          - 'node.role == worker'
      # Options: https://github.com/compose-spec/compose-spec/blob/master/spec.md#restart
      restart_policy: 
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 120s